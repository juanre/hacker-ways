# -*- coding: utf-8 -*-
#+OPTIONS:   TeX:t skip:nil d:nil todo:t pri:nil tags:nil toc:nil
#+begin_export html
---
layout: chapter
more: main page
title: Managing your digital life
author: Juan Reyero
excerpt: When writing or programming you quite soon reach the point at which you need to keep track of your work as it progresses.  With git you can go back in time, keep several versions of a project, and share your work with other developers.
keywords: unix terminal git version control distributed
prev-title: Making the computer work for you
prev-url: computing.html
toc: |
  <ul class="org-ul toc">
  <li><a href="#sec-1-1">Bring in some content</a></li>
  <li><a href="#sec-1-2">Bundling files with <code>tar</code></a></li>
  <li><a href="#sec-1-3">Finding files with <code>find</code></a></li>
  <li><a href="#sec-1-4">Looking for differences between files</a></li>
  <li><a href="#sec-1-5">Find text in files</a></li>
  <li><a href="#sec-1-6">Finding words in files of a particular type</a></li>
  <li><a href="#sec-1-7">Looking for help</a></li>
  </ul>
---
#+end_export

#+begin_src sh :results silent :exports none
  export HOME=/Users/inesuka
  unset http_proxy
  unset https_proxy
  cd
  rm -rf tmp
  rm -rf changek/bootstrap
  unalias rm
  unalias cp
  unalias mv
  alias ls="ls -p"
#+end_src

* ยง8 --- Managing your digital life

When writing or programming you soon feel the need to keep track of your work.  Being able to go back in time to your book as it was three weeks ago, for example.  Or seeing the differences between yesterday's working version of a program and today's failing one.  Programs that help you do these things are called revision control software, and will be a key part of your toolset.  Anything that you create and that will change over time ---either as part of the creation process, or as part of its working life--- should be managed by a revision control system.

The need to keep track of the different versions of files has been felt by programmers since the very beginning of the craft.  The first solution cited in the [[http://en.wikipedia.org/wiki/Source_Code_Control_System][Wikipedia]] dates from 1972 (I was, for the record, two years old), and was written by Marc J. Rochkind.  The first revision control program that I actually used was [[http://en.wikipedia.org/wiki/Revision_Control_System][RCS]], written back in 1982 by Walter F. Tichy.  It spawned [[http://en.wikipedia.org/wiki/Concurrent_Versions_System][CVS]], that could work on full projects instead of only individual files, and in turn inspired [[http://en.wikipedia.org/wiki/Apache_Subversion][subversion]] in 2000.

Subversion, or =svn=, is still in used today by some open source projects.  But most of the world is moving over to [[http://git-scm.com][Git]], which is what you need to learn.

Git was written in 2005 by Linus Torvalds, the creator of Linux, in order to manage the source code of the Linux kernel.  It is a radical departure of everything that had been done before, and a much better solution in many ways.

Git is not a simple program: it can do many things, and it might be overwhelming.  However, normal life with Git does boil down to a handful of commands that you need to know.

** Figuring Git out

The most important thing you need to know about Git is that

A cursory look at them seems to suggest that several hundred are actually tutorials


#+begin_src sh
  cd ~/changek ; ls
#+end_src

#+RESULTS:
: index.html

(Note how we can have more than one command per line if we use a =;= to separate them.)

Just as we left it in the [[file:terminal.org][previous chapter]].  We can also see what's in index.html,

#+begin_src sh
  cat index.html
#+end_src

#+RESULTS:
: Hi there
: How's that going?

* COMMENT Options
#+property: session *shell*
#+property: results output verbatim
#+property: exports both

#+options:   TeX:t skip:nil d:nil todo:t pri:nil tags:nil toc:nil
